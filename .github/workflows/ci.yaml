name: CI and Deploy

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  # This job checks for changes in specific paths and sets outputs
  # that other jobs can use to run conditionally.
  check-changes:
    runs-on: ubuntu-latest
    name: Check for file changes
    outputs:
      assets_changed: ${{ steps.filter.outputs.assets }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Check for path changes
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            assets:
              - 'assets/**'

  # This job runs on all pushes to main to ensure code quality.
  pre-commit:
    runs-on: ubuntu-latest
    name: Run pre-commit checks
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Run pre-commit
        uses: pre-commit/action@v3.0.1
        with:
          extra_args: --all-files --show-diff-on-failure --color=always

  # This job builds and pushes the Docker image after pre-commit checks pass.
  # It runs on every push to the main branch.
  build-and-push:
    runs-on: ubuntu-latest
    needs: pre-commit
    name: Build and Push Docker Image
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get short commit hash
        id: vars
        run: echo "COMMIT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Build and Push Docker Image
        run: |
          docker build \
            -t ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:latest \
            -t ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:${{ env.COMMIT_SHA }} .
          docker push ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }} --all-tags

  # This job syncs assets to R2. It depends on both the build job
  # and the change check, running only when assets have actually changed.
  sync-assets-to-r2:
    runs-on: ubuntu-latest
    needs: [build-and-push, check-changes]
    if: needs.check-changes.outputs.assets_changed == 'true'
    name: Sync assets directory to Cloudflare R2
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Sync files to R2 with AWS CLI
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: "auto"
        run: |
          echo "âœ… Assets have changed. Syncing to R2..."
          aws s3 sync assets/ s3://${{ secrets.R2_BUCKET_NAME }} \
          --endpoint-url ${{ secrets.R2_ENDPOINT_URL }} \
          --delete
